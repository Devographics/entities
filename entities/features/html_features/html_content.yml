#################################################
#
#   Content
#
#################################################

- id: time_element
  name: |
    `<time>`

- id: data_element
  name: |
    `<data>`

- id: microdata
  name: |
    Microdata
  description: |
    `itemprop`, `itemscope`, etc.

- id: microformats
  name: Microformats
  description: |
    `class="h-card"`, `class="h-event"`, etc.

- id: rdfa
  name: |
    RDFa
  description: |
    `property`, `typeof`, etc.

- id: json_ld
  name: |
    JSON-LD
  example:
    language: html
    code: |
      `<script type="application/ld+json">`

- id: blink_element
  name: |
    `<blink>`

- id: marquee_element
  name: |
    `<marquee>`

- id: plaintext_element
  name: |
    `<plaintext>`

- id: frameset_element
  name: |
    `<frameset>` & `<frame>`

- id: font_element
  name: |
    `<font>`

- id: center_element
  name: |
    `<center>`

- id: isindex_element
  name: |
    `<isindex>`

- id: nextid_element
  name: |
    `<nextid>`

- id: applet_element
  name: |
    `<applet>`

- id: custom_highlight_api
  name: CSS Custom Highlight API
  description: |
    Provides a mechanism for styling arbitrary text ranges on a document by using JavaScript to create the ranges, and CSS to style them.
  mdn: en-US/docs/Web/API/CSS_Custom_Highlight_API
  example:
    # TODO: add support for multiple code examples
    language: js
    code: |

      // css
      ::highlight(my-custom-highlight) {
        background-color: blue;
      }

      // js
      const parentNode = document.getElementById("foo");
      const range1 = new Range();
      range1.setStart(parentNode, 10);
      range1.setEnd(parentNode, 20);
      const highlight = new Highlight(range1);
      CSS.highlights.set("my-custom-highlight", highlight);

- id: set_html_unsafe
  name: "`setHtmlUnsafe()`"
  description: |
    Used to parse a string of HTML into a DocumentFragment, which then replaces the element's subtree in the DOM.
  mdn: en-US/docs/Web/API/Element/setHTMLUnsafe
  example:
    language: js
    code: |
      const value = "<p>This is a string of text</p>";
      document.getElementById("target").setHTMLUnsafe(value);

- id: parse_html_unsafe
  name: "`parseHtmlUnsafe()`"
  description: |
    Used to parse a string of HTML, which may contain declarative shadow roots, in order to create a new Document instance.
  mdn: en-US/docs/Web/API/Document/parseHTMLUnsafe_static
  example:
    language: js
    code: |
      Document.parseHTMLUnsafe(input)

#################################################
#
#   External Content
#
#################################################

# - id: crossorigin_attribute
#   name: |
#     `crossorigin`

# - id: integrity_attribute
#   name: |
#     `integrity`

# - id: media_attribute
#   name: |
#     `media`

# - id: referrerpolicy_attribute
#   name: |
#     `referrerpolicy`

# - id: prefetch_attribute
#   name: |
#     `prefetch`

# - id: dns_prefetch_attribute
#   name: |
#     `dns-prefetch`

# - id: preconnect_attribute
#   name: |
#     `preconnect`

# - id: preload_attribute
#   name: |
#     `preload`

# - id: modulepreload_attribute
#   name: |
#     `modulepreload`

# - id: prerender_attribute
#   name: |
#     `prerender`
