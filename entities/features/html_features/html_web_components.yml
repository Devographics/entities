#################################################
#
#   Web Components
#
#################################################

- id: slot_element
  name: |
    `<slot>`  element

- id: slot_attribute
  name: Named slot assigment
  description: |
    `slot="slot_name"` attribute

# see also part_selector. duplicate?
- id: part_pseudo
  name: |
    CSS `::part()` pseudo-element

- id: host_pseudos
  name: Shadow host CSS pseudo-classes
  description: |
    `:host` , `:host()` , `:host-context()`

- id: slotted_pseudo_element
  name: |
    `::slotted()` CSS pseudo-element

- id: custom_elements_get
  name: |
    `customElements.get()`

- id: custom_elements_when_defined
  name: |
    `customElements.whenDefined()`

- id: custom_elements_get_name
  name: |
    `customElements.getName()`

- id: is_attribute
  name: |
    Customized built-in elements
  description: |
    `<button is="fancy-button">`

- id: declarative_custom_elements
  name: Declarative Custom Elements
  resources:
    - url: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Declarative-Custom-Elements-Strawman.md
      title: Declarative Syntax for Custom Elements

- id: reference_target_api
  name: Reference Target API
  resources:
    - url: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/reference-target-explainer.md
      title: Reference Target for Cross-Root ARIA

- id: has_slotted
  webFeaturesId: has-slotted
  name: |
    `:has-slotted`
  description: |
    CSS pseudo-class that allows targeting `<slot>` elements only when they have slotted nodes.
  example:
    language: css
    code: |
      .icon-wrapper slot[name=icon]:not(:has-slotted) {
        display: none;
      }
