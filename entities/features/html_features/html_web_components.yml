#################################################
#
#   Web Components
#
#################################################

- id: slot_element
  name: |
    `<slot>`  element

- id: slot_attribute
  name: |
    `slot` attribute
  description: |
    Replacing predefined parts of a component UI with your own elements.
  example:
    language: html
    code: |
      <my-switch>
        Wi-Fi
        <span slot="start">Enabled</span>
        <span slot="end">Diabled</span>
      </my-switch>

# see also part_selector. duplicate?
- id: part_pseudo
  name: |
    CSS `::part()` pseudo-element

- id: host_pseudos
  name: Shadow host CSS pseudo-classes
  description: |
    `:host` , `:host()` , `:host-context()`

- id: slotted_pseudo_element
  name: |
    `::slotted()` CSS pseudo-element

- id: custom_elements_get
  name: |
    `customElements.get()`

- id: custom_elements_when_defined
  name: |
    `customElements.whenDefined()`

- id: custom_elements_get_name
  name: |
    `customElements.getName()`

- id: is_attribute
  name: |
    Customized built-in elements
  description: |
    `<button is="fancy-button">`

- id: declarative_custom_elements
  isExperimental: true # proposal/unsupported feature
  name: Declarative Custom Elements
  description: |
    Create web components declaratively through HTML, with or without JS.
  example:
    language: html
    code: |
      <definition name="progress-ring">
        <template shadowmode="open">
          <div id="base" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="{{root.attributes.percentage.value}}">
            <slot>{{ root.attributes.percentage.value }}%</slot>
          </div>
          <style>#base { /* ... */ }</style>
        </template>
      </definition>
  resources:
    - url: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/Declarative-Custom-Elements-Strawman.md
      title: Declarative Syntax for Custom Elements

- id: reference_target_api
  isExperimental: true # proposal/unsupported feature
  name: Reference Target API
  description: |
    A way to “redirect” id references to a component to elements in its shadow DOM.
  example:
    language: js
    code: |
      this.attachShadow({ 
        mode: "open",
        referenceTarget: "real-input",
      });
      this.shadowRoot.innerHTML = `<input id="real-input">`;
  resources:
    - url: https://github.com/WICG/webcomponents/blob/gh-pages/proposals/reference-target-explainer.md
      title: Reference Target for Cross-Root ARIA

- id: has_slotted
  webFeaturesId: has-slotted
  name: |
    `:has-slotted`
  description: |
    CSS pseudo-class that allows targeting `<slot>` elements only when they have slotted nodes.
  example:
    language: css
    code: |
      .icon-wrapper slot[name=icon]:not(:has-slotted) {
        display: none;
      }
