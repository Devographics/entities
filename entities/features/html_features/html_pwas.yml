#################################################
#
#   PWAs
#
#################################################

- id: app_manifest
  name: |
    App manifest
  description: |
    `<link rel="manifest">`

- id: service_workers
  name: |
    Service Workers
  description: |
    `navigator.serviceWorker.register("/sw.js")`

- id: notifications_api
  name: |
    Notifications API
  description: |
    `new Notification()`

- id: caching_api
  name: |
    Caching API
  description: |
    `caches.open()` etc.

- id: app_manifest_name
  name: |
    `name`

- id: app_manifest_icons
  name: |
    `icons`

- id: app_manifest_shortcuts
  name: |
    `shortcuts`

- id: app_manifest_file_handlers
  name: |
    `file_handlers`

- id: app_manifest_protocol_handlers
  name: |
    `protocol_handlers`

- id: app_manifest_share_target
  webFeaturesId: app-share-targets
  name: |
    `share_target` manifest field
  description: |
    Lets a PWA receive data (text, files, URLs) shared from other apps via the system share dialog.
  example:
    language: json
    code: |
      "share_target": {
        "action": "/share",
        "method": "POST",
        "enctype": "multipart/form-data",
        "params": {
          "title": "title",
          "text": "text",
          "url": "url",
          "files": [{ "name": "image", "accept": ["image/*"] }]
        }
      }

- id: app_manifest_launch_handler
  name: |
    `launch_handler`

- id: landmark_elements
  name: |
    Landmark Elements
  description: |
    `<aside>`, `<article>`, `<main>`, `<nav>`, `<section>`, etc.
  homepageUrl: https://www.w3.org/WAI/ARIA/apg/patterns/landmarks/examples/HTML5.html

- id: input_element
  name: |
    `<input>`

- id: scrollbar_styling
  patterns:
    - scrollbar
  tags:
    - html_interoperability_features

- id: view_transitions
  patterns:
    - page transition
    - view transition
    - transition api

- id: web_bluetooth_api
  webFeaturesId: web-bluetooth
  name: Web Bluetooth
  description: |
    Connect to and communicate with nearby Bluetooth Low Energy (BLE) devices.
  example:
    language: js
    code: |
      const device = await navigator.bluetooth.requestDevice({ filters: [{ services: ["heart_rate"] }] });
  patterns:
    - bluetooth

- id: webgpu
  name: WebGPU
  description: |
    A JavaScript API that provides low-level access to the GPU for high-performance graphics and parallel computation in the browser.
  example:
    language: js
    code: |
      const adapter = await navigator.gpu.requestAdapter();
      const device = await adapter?.requestDevice();
  mdn: /en-US/docs/Web/API/WebGPU_API
  resources:
    - url: https://developer.chrome.com/blog/webgpu-io2023/
      title: WebGPU: Unlocking modern GPU access in the browser  |  Blog  |  Chrome for Developers
    - url: https://developer.chrome.com/docs/web-platform/webgpu/
      title: WebGPU  |  Chrome for Developers
    - url: https://webkit.org/demos/webgpu/
      title: WebGPU demos

- id: avif
  name: AVIF

- id: progress_element
  name: "`<progress>`"
  patterns:
    - <progress [p]

- id: shape_detection_api
  name: Shape Detection API
  resources:
    - url: https://developer.chrome.com/docs/capabilities/shape-detection
      title: "The Shape Detection API: a picture is worth a thousand words, faces, and barcodes"
  patterns:
    - shape detection
  tags:
    - html_interoperability_features

- id: input_type_radio
  name: |
    `<input type="radio">`
  patterns:
    - radio

- id: input_type_checkbox
  name: |
    `<input type="checkbox">`
  patterns:
    - checkbox [p]

- id: button_element
  name: |
    `<button>`
  patterns:
    - button

- id: textarea_element
  name: |
    `<textarea>`
  patterns:
    - text(-| )?area

- id: table_element
  name: |
    `<table>`
  patterns:
    - <table

- id: fieldset_element
  name: |
    `<fieldset>`
  patterns:
    - fieldset

- id: webp_format
  name: WebP
  patterns:
    - webp

- id: drag_and_drop_api
  name: Drag and Drop API
  mdn: en-US/docs/Web/API/HTML_Drag_and_Drop_API
  patterns:
    - drag, drop, api [l]

- id: history_api
  name: History API
  mdn: en-US/docs/Web/API/History_API
  patterns:
    - history, api

- id: intersection_observer_api
  name: Intersection Observer API
  mdn: https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API
  patterns:
    - intersection observer
    - intersectionobserver

- id: push_api
  name: Push API
  mdn: https://developer.mozilla.org/en-US/docs/Web/API/Push_API
  patterns:
    - push, notification [l]

- id: web_usb_api
  webFeaturesId: webusb
  name: WebUSB API
  description: |
    Directly communicate with USB devices, enabling data exchange without drivers or native apps.
  example:
    language: js
    code: |
      const device = await navigator.usb.requestDevice({ filters: [{ vendorId: 0x2341 }] });
      await device.open();

- id: payment_request_api
  webFeaturesId: payment-request
  name: |
    `PaymentRequest` API
  description: |
    Enables a consistent, secure way for websites to request payments using the browser’s native UI.
  example:
    language: js
    code: |
      const request = new PaymentRequest(
        [{ supportedMethods: "basic-card" }], 
        { total: { label: "Total", amount: { currency: "USD", value: "9.99" } } }
      );
      let response = await request.show();
      response.complete("success"));
