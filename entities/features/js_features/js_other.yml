#################################################
#
#   JS
#
#################################################

# APIs

- id: destructuring
  name: Destructuring
  mdn: /en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

- id: spread_operator
  name: Spread Operator
  mdn: /en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax

- id: arrow_functions
  name: Arrow Functions
  mdn: /en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions

- id: proxies
  name: Proxies
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy

- id: decorators
  name: Decorators
  # mdn:

- id: maps
  name: Maps
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

- id: sets
  name: Sets
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Set

- id: typed_arrays
  name: Typed Arrays
  mdn: /en-US/docs/Web/JavaScript/Typed_arrays

- id: array_prototype_flat
  name: array.flat()
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat

- id: fetch
  name: Fetch
  mdn: /en-US/docs/Web/API/Fetch_API/Using_Fetch

- id: i18n
  name: i18n
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl

- id: local_storage
  name: Local Storage
  mdn: /en-US/docs/Web/API/Window/localStorage

- id: session_storage
  name: Session Storage
  mdn: /en-US/docs/Web/API/Window/sessionStorage

- id: document_cookie
  name: |
    `document.cookie`
  mdn: /en-US/docs/Web/API/Document/cookie

- id: indexed_db
  name: IndexedDB
  mdn: /en-US/docs/Web/API/IndexedDB_API

- id: cache_storage
  name: Cache Storage
  example:
    language: js
    code: |
      const cacheStorage = await caches.open(cacheName);
  mdn: /en-US/docs/Web/API/CacheStorage

- id: service_workers
  name: Service Workers
  mdn: /en-US/docs/Web/API/Service_Worker_API

- id: web_animations
  webFeaturesId: web-animations
  name: Web Animations
  mdn: /en-US/docs/Web/API/Web_Animations_API/Using_the_Web_Animations_API

- id: web_audio
  name: Web Audio
  mdn: /en-US/docs/Web/API/Web_Audio_API

- id: web_components
  name: Web Components
  mdn: /en-US/docs/Web/Web_Components

- id: webrtc
  webFeaturesId: webrtc
  name: WebRTC
  mdn: /en-US/docs/Web/API/WebRTC_API

- id: websocket
  webFeaturesId: websockets
  name: WebSocket
  mdn: /en-US/docs/Web/API/WebSockets_API
  patterns:
    - websockets

- id: web_speech
  name: Web Speech API
  mdn: /en-US/docs/Web/API/Web_Speech_API

- id: webvr
  name: WebVR
  mdn: /en-US/docs/Web/API/WebVR_API

- id: page_visibility
  webFeaturesId: page-visibility
  name: Page Visibility API
  mdn: /en-US/docs/Web/API/Page_Visibility_API
  caniuse: pagevisibility

- id: broadcast_channel
  webFeaturesId: broadcast-channel
  name: Broadcast Channel API
  mdn: /en-US/docs/Web/API/Broadcast_Channel_API
  caniuse: broadcastchannel

- id: geolocation
  webFeaturesId: geolocation
  name: Geolocation API
  mdn: /en-US/docs/Web/API/Geolocation_API
  caniuse: geolocation

- id: file_system_access
  name: File System Access API
  mdn: /en-US/docs/Web/API/File_System_Access_API
  caniuse: native-filesystem-api

- id: web_share
  name: Web Share API
  mdn: /en-US/docs/Web/API/Web_Share_API
  caniuse: web-share

- id: webxr
  webFeaturesId: webxr-device
  name: "`navigator.xr` (WebXR Device API)"
  description: |
    Create AR/VR sessions with compatible output devices.
  example:
    language: js
    code: |
      const xr = navigator.xr;
      const session = await xr?.requestSession("immersive-vr");
  mdn: /en-US/docs/Web/API/WebXR_Device_API
  caniuse: webxr

# Other Features, Patterns

- id: pwas
  name: Progressive Web Apps
  mdn: /en-US/docs/Web/Progressive_web_apps
  tags:
    - html_interoperability_features
  patterns:
    - pwa

- id: twa
  name: Trusted Web Activity
  homepageUrl: https://developer.chrome.com/docs/android/trusted-web-activity

- id: wasm
  webFeaturesId: wasm
  name: WebAssembly (WASM)
  mdn: /en-US/docs/WebAssembly

- id: client_side_rendering
  name: Client-side rendering
  patterns:
    - client-side rendering
    - csr [e]

- id: micro_frontends
  name: Micro-frontends

# Language

- id: nullish_coalescing
  webFeaturesId: nullish-coalescing
  description: >
    Return first value, or second value if first value is `null` or `undefined`.
  name: Nullish Coalescing
  mdn: /en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator
  example:
    language: js
    code: |
      const foo = null ?? 'default string';
      console.log(foo);
      // expected output: "default string"

      const baz = 0 ?? 42;
      console.log(baz);
      // expected output: 0
  patterns:
    - elvis

- id: optional_chaining
  name: Optional Chaining
  mdn: /en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining

- id: private_fields
  description: >
    Properties that cannot be legally referenced outside of the class.
  name: Private Properties
  mdn: /en-US/docs/Web/JavaScript/Reference/Classes/Private_properties
  example:
    language: js
    code: |
      class ClassWithPrivateField {
        #privateField
      }

- id: dynamic_import
  description: >
    Load a module asynchronously and dynamically.
  name: Dynamic Import
  mdn: en-US/docs/Web/JavaScript/Reference/Operators/import
  example:
    language: js
    code: |
      await import('/modules/my-module.js')

- id: big_int
  name: "`BigInt`"
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt

- id: intl_api
  name: "`Intl`"
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl
  tags:
    - html_interoperability_features

- id: custom_elements
  name: Custom Elements
  mdn: /en-US/docs/Web/Web_Components

# moved to features_html
# - id: shadow_dom
#   name: Shadow DOM
#   mdn: /en-US/docs/Web/Web_Components

- id: numeric_separators
  name: Numeric Separators
  mdn: /en-US/docs/Web/JavaScript/Reference/Lexical_grammar
  caniuse: mdn-javascript_grammar_numeric_separators

- id: logical_assignment
  webFeaturesId: logical-assignments
  description: >
    Operators to assign a value to a variable based on its own truthy/falsy status.
  name: Logical Assignment
  mdn: /en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment
  caniuse: mdn-javascript_operators_logical_and_assignment
  example:
    language: js
    code: |
      const a = { duration: 50, title: '' };

      a.duration ||= 10;
      console.log(a.duration);
      // expected output: 50

      a.title ||= 'title is empty.';
      console.log(a.title);
      // expected output: "title is empty"

- id: temporal
  webFeaturesId: temporal
  name: Temporal
  description: Provides standard objects and functions for working with dates and times.
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Date

- id: error_cause
  webFeaturesId: error-cause
  name: "`error.cause`"
  description: >
    Indicate the specific original cause of the error.
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause
  example:
    language: js
    code: |
      try {
        connectToDatabase();
      } catch (err) {
        throw new Error('Connecting to database failed.', { cause: err });
      }

- id: object_hasown
  name: "`Object.hasOwn()`"
  example:
    language: js
    code: |
      const object1 = {
        prop: 'exists'
      };
      console.log(Object.hasOwn(object1, 'prop'));
      // expected output: true
  mdn: /en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn

- id: regexp_match_indices
  name: Regexp Match Indices
  description: >
    Store the start and end positions of each matched capture group.
  mdn: en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices
  example:
    language: js
    code: |
      const str1 = "foo bar foo";
      const regex1 = /foo/dg;
      console.log(regex1.exec(str1).indices[0]); // Output: Array [0, 2]
  resources:
    - url: https://v8.dev/features/regexp-match-indices
      title: RegExp match indices

- id: hashbang_grammar
  webFeaturesId: hashbang-comments
  description: >
    Provide the path to a specific JavaScript interpreter that you want to use to execute the script.
  name: Hashbang Grammar
  mdn: en-US/docs/Web/JavaScript/Reference/Lexical_grammar#hashbang_comments
  example:
    language: js
    code: |
      #!/usr/bin/env node

      console.log("Hello world");

- id: object_group_by
  webFeaturesId: set-methods
  name: >
    `Object.groupBy()`
  description: >
    Group the elements of a given iterable according to the string values returned by a provided function.
  mdn: en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/union
  example:
    language: js
    code: |
      const inventory = [
        { name: "salad", type: "vegetables" },
        { name: "banana", type: "fruit" },
        { name: "apple", type: "fruit" },
      ];

      const result = Object.groupBy(inventory, ({ type }) => type);

      /*
      {
        vegetables: [
          { name: 'salad', type: 'vegetables' },
        ],
        fruit: [
          { name: "banana", type: "fruit" },
          { name: "apple", type: "fruit" }
        ]
      }
      */

- id: js_structs
  name: JavaScript Structs
  description: Enable high-performance applications by unlocking shared memory multithreading.
  resources:
    - title: JavaScript Structs Proposal
      url: https://github.com/tc39/proposal-structs
  example:
    language: js
    code: |
      struct Box {
        constructor(x) { this.x = x; }
        x;
      }

      let box = new Box(0);
      box.x = 42;  // x is declared
      box.y = 42;  // error

- id: js_iterator_chunking
  name: Iterator Chunking
  description: A way to transform an iterator into subsequences of configurable size.
  resources:
    - title: Iterator Chunking Proposal
      url: https://github.com/tc39/proposal-iterator-chunking
  example:
    language: js
    code: |
      const digits = () => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].values();

      let chunksOf2 = Array.from(digits().chunks(2));
      // [ [0, 1], [2, 3], [4, 5], [6, 7], [8, 9] ]

- id: js_iterator_methods
  webFeaturesId: iterator-methods
  name: Iterator Methods
  description: >
    Helper methods such as `map`, `filter`, `reduce`, and others applied to Iterators.
  resources:
    - title: Iterator helpers have become Baseline Newly available
      url: https://web.dev/blog/baseline-iterator-helpers
  example:
    language: js
    code: |
      function* factorials (n) {
        let result = 1;
        for (let i = 1; i <= n; i++) {
          result *= i;
          yield result;
        }
      }

      const filteredFactorials = factorials(128).filter(x => x % 8 === 0);

- id: js_get_or_insert
  name: |
    `map.getOrInsert()`
  description: Checking if a key is present, and then inserting or updating depending upon the result, in a single call.
  resources:
    - title: Upsert Proposal
      url: https://github.com/tc39/proposal-upsert
  example:
    language: js
    code: |
      // Using getOrInsert
      let prefs = new getUserPrefs();
      prefs.getOrInsert("useDarkmode", true); // default to true

- id: error_is_error
  name: |
    `Error.isError()`
  resources:
    - title: Error.isError Proposal
      url: https://github.com/tc39/proposal-is-error
  example:
    language: js
    code: |
      const err = new Error()
      Error.isError(err)

- id: js_decorators
  name: Decorators
  description: Functions called on classes or other JavaScript syntax forms during definition.
  resources:
    - title: Decorators Proposal
      url: https://github.com/tc39/proposal-decorators
  example:
    language: js
    code: |
      @defineElement("my-class")
      class C extends HTMLElement {
        @reactive accessor clicked = false;
      }

- id: js_source_phase_imports
  name: Source Phase Imports
  description: Customize the loading, linking, and execution of modules beyond the standard host execution model.
  resources:
    - title: Source Phase Imports Proposal
      url: https://github.com/tc39/proposal-source-phase-imports
  example:
    language: js
    code: |
      import source x from "<specifier>";

- id: js_shadow_realm
  name: ShadowRealm API
  description: A distinct global environment, with its own global object containing its own intrinsics and built-ins.
  resources:
    - title: ShadowRealm Proposal
      url: https://github.com/tc39/proposal-shadowrealm
  example:
    language: js
    code: |
      declare class ShadowRealm {
        constructor();
        importValue(specifier: string, bindingName: string): Promise<PrimitiveValueOrCallable>;
        evaluate(sourceText: string): PrimitiveValueOrCallable;
      }

- id: js_pipeline_operator
  name: |
    Pipe Operator (`|>`)
  description: A new `|>` operator for passing the result of one function to another.
  resources:
    - title: Pipe Operator (|>) for JavaScript Proposal
      url: https://github.com/tc39/proposal-pipeline-operator
  example:
    language: js
    code: |
      input
        |> f(#, 0)
        |> await g(#, { opt: true })
        |> Array.from(#)
        |> console.log(`Result is ${#}.`);
  patterns:
    - pipe
    - pipeline

- id: js_async_context
  name: Async Context
  description: APIs to propagate a value through asynchronous code, such as a promise continuation or async callbacks.
  resources:
    - title: Async Context Proposal
      url: https://github.com/tc39/proposal-async-context
  patterns:
    - async( )?context

- id: js_extractors
  name: Extractors
  description: A mechanism for executing user-defined logic during destructuring.
  resources:
    - title: Extractors Proposal
      url: https://github.com/tc39/proposal-extractors
  example:
    language: js
    code: |
      let Foo(a, { b }, [c]) = x;

- id: gamepad_api
  webFeaturesId: gamepad
  name: Gamepad API
  mdn: en-US/docs/Web/API/Gamepad_API

- id: web_authentication_api
  webFeaturesId: webauthn
  name: Web Authentication API
  mdn: en-US/docs/Web/API/Web_Authentication_API

- id: web_nfc_api
  webFeaturesId: web-nfc
  name: Web NFC
  description: |
    Read from and write to NFC tags using a device’s built-in NFC reader.
  example:
    language: js
    code: |
      const reader = new NDEFReader();
      await reader.scan();
      reader.onreading = e => console.log(e.message.records);
  mdn: en-US/docs/Web/API/Web_NFC_API
  patterns:
    - nfc

- id: web_serial_api
  name: Web Serial API
  mdn: en-US/docs/Web/API/Web_Serial_API
  patterns:
    - serial, api [l]

- id: speech_recognition_api
  webFeaturesId: speech-recognition
  name: |
    `SpeechRecognition`
  description: |
    API that converts microphone input to text.
  example:
    language: js
    code: |
      const rec = new SpeechRecognition();
      rec.lang = "en-US";
      rec.addEventListener("result", e => console.log(e.results[0][0].transcript));
      rec.start();
  mdn: en-US/docs/Web/API/SpeechRecognition
  patterns:
    - speech( )?recognition

- id: eye_dropper_api
  name: EyeDropper API
  mdn: en-US/docs/Web/API/EyeDropper_API
  patterns:
    - eye( )?dropper

- id: background_sync_api
  name: Background Synchronization API
  mdn: en-US/docs/Web/API/Background_Synchronization_API
  patterns:
    - background sync
    - background synchronization

- id: before_install_prompt_event
  name: BeforeInstallPromptEvent
  mdn: en-US/docs/Web/API/BeforeInstallPromptEvent

- id: shared_worker
  name: |
    `SharedWorker`
  mdn: en-US/docs/Web/API/SharedWorker

- id: js_explicit_resource_management
  name: Explicit Resource Management
  description: Allocation of a resource and the ability to explicitly release critical resources.
  resources:
    - url: https://github.com/tc39/proposal-explicit-resource-management
      title: ECMAScript Explicit Resource Management Proposal

- id: js_dynamic_code_brand_checks
  name: Dynamic Code Brand Checks
  resources:
    - url: https://github.com/tc39/proposal-dynamic-code-brand-checks
      title: Dynamic Code Brand Checks Proposal

- id: regexp_escape
  webFeaturesId: regexp-escape
  name: |
    `RegExp.escape`
  description: Escaping a string for use inside a Regular Expression.
  resources:
    - url: https://github.com/tc39/proposal-regex-escaping
      title: RegExp Escaping Proposal

- id: js_deferring_module_evaluation
  name: Deferring Module Evaluation
  description: Modules that would not be executed when loaded, but would be fully loaded to the point of being execution-ready.
  resources:
    - url: https://github.com/tc39/proposal-defer-import-eval
      title: Deferring Module Evaluation Proposal

- id: js_joint_iteration
  name: Joint Iteration
  description: Synchronise the advancement of multiple iterators.
  resources:
    - url: https://github.com/tc39/proposal-joint-iteration
      title: Joint Iteration Proposal

- id: js_iterator_sequencing
  name: Iterator Sequencing
  description: Create iterators by sequencing existing iterators.
  resources:
    - url: https://github.com/tc39/proposal-iterator-sequencing
      title: Iterator Sequencing Proposal

- id: js_signals
  name: Signals
  description: Used in reactive programming to remove the need to manage updating in applications.
  resources:
    - url: https://github.com/tc39/proposal-signals
      title: Signals Proposal
  patterns:
    - signal

- id: js_record_tuple
  name: |
    `Record` & `Tuple`
  description: Two deeply immutable data structures.
  patterns:
    - tuple
    - records
  resources:
    - url: https://github.com/tc39/proposal-record-tuple
      title: Records & Tuples Proposal

- id: js_composites
  name: Composites
  description: Keys for Maps and Sets that represent a structured group of values.
  patterns:
    - composites
  resources:
    - url: https://github.com/tc39/proposal-composites
      title: Composites Proposal

- id: js_pattern_matching
  name: Pattern Matching
  description: A new `match` keyword for pattern-matching objects.
  patterns:
    - pattern
    - match
  resources:
    - url: https://github.com/tc39/proposal-pattern-matching
      title: Pattern Matching Proposal

- id: js_observable
  name: |
    `Observable`
  description: A type that can be used to model push-based data sources such as DOM events, timer intervals, and sockets.
  patterns:
    - observable
  resources:
    - url: https://github.com/tc39/proposal-observable
      title: Observable Proposal

- id: js_json_parse_source_access
  name: JSON.parse source text access
  description: Grant reviver functions access to the input source text.
  resources:
    - url: https://github.com/tc39/proposal-json-parse-with-source
      title: JSON.parse source text access Proposal

- id: js_decorator_metadata
  name: Decorator Metadata
  description: Extend the Decorators proposal by adding the ability for decorators to associate metadata with the value being decorated.
  resources:
    - url: https://github.com/tc39/proposal-decorator-metadata
      title: Decorator Metadata Proposal

- id: js_float16_arrays
  webFeaturesId: float16array
  name: Float16Array
  description: Add float16 (aka half-precision or binary16) TypedArrays to JavaScript.
  resources:
    - url: https://github.com/tc39/proposal-float16array
      title: Float16Array Proposal

- id: js_native_types
  patterns:
    - native type
    - native typing
    - types [e]
    - typing [e]

- id: js_safe_assignment_operator
  name: Safe Assignment Operator
  resources:
    - url: https://github.com/arthurfiorette/proposal-safe-assignment-operator
      title: Safe Assignment Operator Proposal
  patterns:
    - safe, assignment [l]
    - typing [e]

- id: js_type_annotations
  name: Type Annotations
  resources:
    - url: https://github.com/tc39/proposal-type-annotations
      title: Type Annotations Proposal
  patterns:
    - type annotations
    - type, comments [l]
  tags:
    - native_types_proposal

- id: structured_clone
  webFeaturesId: structured-clone
  name: >
    `structuredClone()`
  description: Creates a deep copy of an object.

- id: scheduler_api
  webFeaturesId: scheduler
  name: Scheduler API
  description: The Scheduler API provides a way to prioritize all tasks belonging to an application.
  mdn: en-US/docs/Web/API/Scheduler
  example:
    language: js
    code: |
      scheduler
        .postTask(() => "Task executing")
        .then((taskResult) => console.log(`${taskResult}`)) // Log result
        .catch((error) => console.error(`Error: ${error}`)); // Log errors
