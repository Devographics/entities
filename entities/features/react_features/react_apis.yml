# apis

- id: createcontext
  name: "`createContext`"
  example:
    language: jsx
    code: |
      const SomeContext = createContext(defaultValue)
  homepageUrl: https://react.dev/reference/react/createContext

- id: forwardref
  name: "`forwardRef`"
  example:
    language: jsx
    code: |
      const SomeComponent = forwardRef(render)
  homepageUrl: https://react.dev/reference/react/forwardRef
  patterns:
    - forward, ref [l]

- id: lazy
  name: "`lazy` "
  example:
    language: jsx
    code: |
      const SomeComponent = lazy(load)
  homepageUrl: https://react.dev/reference/react/lazy

- id: memo
  name: "`memo`"
  description: >
    `memo` lets you skip re-rendering a component when its props are unchanged.
  example:
    language: jsx
    code: |
      const MemoizedComponent = memo(SomeComponent, arePropsEqual?)
  homepageUrl: https://react.dev/reference/react/memo
  resources:
    - url: https://blog.isquaredsoftware.com/2020/05/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior/
      title: A (Mostly) Complete Guide to React Rendering Behavior
    - url: https://overreacted.io/before-you-memo/
      title: Before You memo()
  patterns:
    - memoization

- id: starttransition
  name: "`startTransition`"
  description: >
    `startTransition` lets you update the state without blocking the UI.
  example:
    language: jsx
    code: |
      startTransition(scope)
  homepageUrl: https://react.dev/reference/react/startTransition

# component_apis

- id: createPortal
  name: "`createPortal`"
  example:
    language: jsx
    code: |
      <div>
        <SomeComponent />
        {createPortal(children, domNode, key?)}
      </div>
  homepageUrl: https://react.dev/reference/react-dom/createPortal
#
# - id: flushSync
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
# - id: findDOMNode
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
# - id: Hydrate
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
# - id: Render
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
# - id: unmountComponentAtNode
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:

# client_apis

- id: createroot
  name: >
    `createRoot`
  description: >
    `createRoot` lets you create a root to display React components inside a browser DOM node.
  example:
    language: jsx
    code: |
      const root = createRoot(domNode, options?)
  homepageUrl: https://react.dev/reference/react-dom/client/createRoot

- id: hydrateroot
  name: >
    `hydrateRoot`
  description: >
    `hydrateRoot` lets you display React components inside a browser DOM node whose HTML content was previously generated by `react-dom/server`.
  example:
    language: jsx
    code: |
      const root = hydrateRoot(domNode, reactNode, options?)
  homepageUrl: https://react.dev/reference/react-dom/client/hydrateRoot

# server_apis

- id: react_server_components
  name: React Server Components
  # example:
  #   language: jsx
  #   code: |
  homepageUrl: https://nextjs.org/docs/getting-started/react-essentials#server-components
  resources:
    - url: https://www.joshwcomeau.com/react/server-components/
      title: Making Sense of React Server Components
  patterns:
    - server components
    - server( |-)?side components
    - rsc(s)?

- id: renderToNodeStream
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: renderToPipeableStream
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: renderToReadableStream
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: renderToStaticMarkup
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: renderToStaticNodeStream
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: renderToString
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:

# legacy_apis

- id: cloneelement
  name: >
    `cloneElement`
  example:
    language: jsx
    code: |
      const clonedElement = cloneElement(element, props, ...children)
  homepageUrl: https://react.dev/reference/react/cloneElement

- id: class_components
  name: >
    `Component` (class components)
  example:
    language: jsx
    code: |
      class Greeting extends Component {
        render() {
          return <h1>Hello, {this.props.name}!</h1>;
        }
      }

  homepageUrl: https://react.dev/reference/react/Component

- id: createelement
  name: >
    `createElement`
  description: >
    `createElement` lets you create a React element. It serves as an alternative to writing JSX.
  example:
    language: jsx
    code: |
      const element = createElement(type, props, ...children)
  homepageUrl: https://react.dev/reference/react/createElement
#
- id: createFactory
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: createRef
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: isValidElement
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
#
- id: PureComponent
#   name:
#   example:
#     language: jsx
#     code: |

#   homepageUrl:
